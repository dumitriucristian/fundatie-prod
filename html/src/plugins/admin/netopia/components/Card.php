<?php 
namespace Admin\Netopia\Components;

use Cms\Classes\ComponentBase;
use \Admin\Netopia\Classes\Mobilpay_Payment_Request_Abstract;
use \Admin\Netopia\Classes\Mobilpay_Payment_Request_Card;
use \Admin\Netopia\Classes\Mobilpay_Payment_Invoice;
use \Admin\Netopia\Classes\Mobilpay_Payment_Address;
use Input;
use Validator;
use ValidationException;
use Admin\Netopia\Models\Donation;



class Card extends ComponentBase
{

    private $paymentId;
    private $paymentData;
 
    public function componentDetails()
    {
        return [
            'name' => 'Card donation',
            'description' => 'card donation'
        ];
    }

      public function onSave()
    {
        
        $data = post();
        $validator = Validator::make($data,
            [
                'billing_first_name' => ['required','string','max:50',],
                'billing_last_name' => ['required','string','max:50',],
                'sum' => ['required','integer',],
                'billing_email' => ['required','string','email'],
                'billing_mobile_phone' => ['required','string',],
                'message' => ['string'],
            ],
            
            [
                'billing_first_name.required' => 'Numele trebuie completat.',
                'billing_first_name.string' => 'Prenumele trebuie sa fie text',
                'billing_first_name.max' => 'Numele trebuie sa aiba maxim :max caractere.',

                'billing_last_name.required' => 'Numele trebuie completat.',
                'billing_lat_name.string' => 'Numele trebuie sa fie text',
                'billing_last_name.max' => 'Numele trebuie sa aiba maxim :max caractere.',
    
                'billing_email.required' => 'Email-ul trebuie completat',
                'billing_email.string' => 'Email-ul trebuie sa fie un text',
                'billing_email.max' => 'Email-ul trebuie sa aiba maxim :max caractere',
                'billing_email.email' => 'Email-ul nu este o adresa de email valida',
    
                'billing_mobile_phone.string' => 'Numarul de telefon trebuie sa fie text',
                'billing_mobile_phone.size' => 'Numarul de telefon trebuie sa aiba :size caractere',

                'sum.integer' => 'Suma poate fi doar numere intregi',
                'sum.required' => 'Suma trebuie completata',


            ]);
    
        if($validator->fails())
        {
            throw new ValidationException($validator);
        }
       
        $paymentData = $this->registerPayment($data);
        $paymentDate = $this->setTime();
        $this->setPayment($paymentData, $paymentDate);        
    }
    

    private function setTime()
    {
        $gmt = new \DateTime( 'now',  new \DateTimeZone( 'Europe/Bucharest' ) );
        $time = $gmt->format('y-m-d-H-i');
        return $time;
    }

    private function registerPayment($data)
    {
        $donation = new Donation();
        $donation->sum = $data['sum'];
        $donation->name = $data['billing_first_name'];
        $donation->surname = $data['billing_last_name'];
        $donation->email = $data['billing_email'];
        $donation->phone = $data['billing_mobile_phone'];
        $donation->message = $data['message']; 
        $donation->save();   
        return $donation;
    }

    private function addNetopiaPaymentId($paymentData, $netopiaId)
    {
        try{
            $paymentData->payment_id = $netopiaId;
            $paymentData->save();
        }catch(\Exception $e ){

        }      
    }

    private function setPayment($paymentData, $paymentDate)
    {
           #for testing purposes, all payment requests will be sent to the sandbox server. Once your account will be active you must switch back to the live server https://secure.mobilpay.ro
            #in order to display the payment form in a different language, simply add the language identifier to the end of the paymentUrl, i.e https://secure.mobilpay.ro/en for English
               // this is the path on your server to the public certificate. You may download this from Admin -> Conturi de comerciant -> Detalii -> Setari securitate
                $paymentUrl = env('PAYMENT_URL');
                $public_cert_file = env('CERT_PUB');
                $x509FilePath 	= plugins_path(env('CERT_PATH').$public_cert_file);
                
          
               // die($x509FilePath);
                try
                {
                    srand((double) microtime() * 1000000);
                    $objPmReqCard 						= new Mobilpay_Payment_Request_Card();
                   // dd($objPmReqCard);
                    #merchant account signature - generated by mobilpay.ro for every merchant account
                    #semnatura contului de comerciant - mergi pe www.mobilpay.ro Admin -> Conturi de comerciant -> Modifica -> Setari securitate
                    $objPmReqCard->signature 			= env('SIGNATURE');
                    #you should assign here the transaction ID registered by your application for this commercial operation
                    #order_id should be unique for a merchant account
                    $objPmReqCard->orderId 				= md5(uniqid(rand()));
                    #below is where mobilPay will send the payment result. This URL will always be called first; mandatory
                    $objPmReqCard->confirmUrl 			= env('APP_URL').'/confirm'; 
                    #below is where mobilPay redirects the client once the payment process is finished. Not to be mistaken for a "successURL" nor "cancelURL"; mandatory
                    $objPmReqCard->returnUrl 			= env('APP_URL').'/return'; 
                    $objPmReqCard->successUrl 			= env('APP_URL'). '/success'; 
                    $objPmReqCard->cancelUrl 			= env('APP_URL'). '/cancel'; 
                    #detalii cu privire la plata: moneda, suma, descrierea
                    #payment details: currency, amount, description
                    $objPmReqCard->invoice = new Mobilpay_Payment_Invoice();
                    #payment currency in ISO Code format; permitted values are RON, EUR, USD, MDL; please note that unless you have mobilPay permission to 
                    #process a currency different from RON, a currency exchange will occur from your currency to RON, using the official BNR exchange rate from that moment
                    #and the customer will be presented with the payment amount in a dual currency in the payment page, i.e N.NN RON (e.ee EUR)
                    $objPmReqCard->invoice->currency	= 'RON';
                    $objPmReqCard->invoice->amount		= $paymentData->sum;
                    #available installments number; if this parameter is present, only its value(s) will be available
                    //$objPmReqCard->invoice->installments= '2,3';
                    #selected installments number; its value should be within the available installments defined above
                    //$objPmReqCard->invoice->selectedInstallments= '3';
                        //platile ulterioare vor contine in request si informatiile despre token. Prima plata nu va contine linia de mai jos.
                    $objPmReqCard->invoice->tokenId 	= 'token_id';
                    $objPmReqCard->invoice->details		= 'Plata online cu cardul ' . $paymentDate. '-#'.$paymentData->id; 
                    
                    #detalii cu privire la adresa posesorului cardului
                    #details on the cardholder address (optional)
                    $billingAddress 				= new Mobilpay_Payment_Address();
                    $billingAddress->type			= "person";//should be "person"
                    $billingAddress->firstName		= $paymentData->name;
                    $billingAddress->lastName		= $paymentData->surname;
                    $billingAddress->email			= $paymentData->email;
                    $billingAddress->mobilePhone	= $paymentData->phone;
                    $objPmReqCard->invoice->setBillingAddress($billingAddress);
                    
                    #detalii cu privire la adresa de livrare
                    #details on the shipping address
                   /* $shippingAddress 				= new Mobilpay_Payment_Address();
                    $shippingAddress->type			= $_POST['shipping_type'];
                    $shippingAddress->firstName		= $_POST['shipping_first_name'];
                    $shippingAddress->lastName		= $_POST['shipping_last_name'];
                    $shippingAddress->address		= $_POST['shipping_address'];
                    $shippingAddress->email			= $_POST['shipping_email'];
                    $shippingAddress->mobilePhone		= $_POST['shipping_mobile_phone'];
                    $objPmReqCard->invoice->setShippingAddress($shippingAddress);
                */
                    #uncomment the line below in order to see the content of the request
                //    echo "<pre>";print_r($objPmReqCard);echo "</pre>";
                    $objPmReqCard->encrypt($x509FilePath);
                    $this->addNetopiaPaymentId($paymentData, $objPmReqCard->orderId);
                        
                }
                
                catch(Exception $e)
                {
                    die('exception');
                }
          
            
                $this->page['paymentURL'] = $paymentUrl;
                $this->page['envKey'] = $objPmReqCard->getEnvKey();
                $this->page['encData'] = $objPmReqCard->getEncData();
               // dump($objPmReqCard);
               // return $objPmReqCard;
    }
}